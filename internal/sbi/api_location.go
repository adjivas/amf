/*
 * Namf_Location
 *
 * AMF Location Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sbi

import (
	"net/http"

	"github.com/free5gc/amf/internal/logger"
	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"
	"github.com/gin-gonic/gin"
)

func (s *Server) getLocationRoutes() []Route {
	return []Route{
		{
			Method:  http.MethodGet,
			Pattern: "/",
			APIFunc: func(c *gin.Context) {
				c.String(http.StatusOK, "Hello World!")
			},
		},
		{
			Name:    "EventEir",
			Method:  http.MethodPost,
			Pattern: "/nnrf-nfm/v1",
			APIFunc: s.HTTPEventEir,
		},
		{
			Name:    "ProvideLocationInfo",
			Method:  http.MethodPost,
			Pattern: "/:ueContextId/provide-loc-info",
			APIFunc: s.HTTPProvideLocationInfo,
		},
		{
			Name:    "ProvidePositioningInfo",
			Method:  http.MethodPost,
			Pattern: "/:ueContextId/provide-pos-info",
			APIFunc: s.HTTPProvidePositioningInfo,
		},
		{
			Name:    "CancelLocation",
			Method:  http.MethodPost,
			Pattern: "/:ueContextId/cancel-loc-info",
			APIFunc: s.HTTPCancelLocation,
		},
	}
}

func (s *Server) HTTPEventEir(c *gin.Context) {
	var requestNotificationData models.NrfNfManagementNotificationData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.LocationLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&requestNotificationData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.LocationLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	event := requestNotificationData.Event
	if event == "NF_DEREGISTERED" {
		if NfServices := requestNotificationData.NfProfile.NfServices; NfServices != nil {
			logger.MainLog.Infof("AMF receives %+v deregistration EIR notification", NfServices[0].ApiPrefix)
			if s.ServerAmf.Context().EIRApiPrefix == NfServices[0].ApiPrefix {
				s.ServerAmf.Context().EIRApiPrefix = ""
			} else if s.ServerAmf.Context().EIRApiPrefix == ""{
				logger.MainLog.Warnf("This EIR notification is ignored, because the AMF haven't any EIR registered")
			} else {
				logger.MainLog.Warnf("This EIR notification is ignored, because the AMF use the %+v EIR", s.ServerAmf.Context().EIRApiPrefix)
			}
		} else {
			logger.MainLog.Warnf("AMF receives malformed deregistration EIR notification: %+v", requestNotificationData)
		}
	} else if event == "NF_REGISTERED" {
		if NfServices := requestNotificationData.NfProfile.NfServices; NfServices != nil {
			logger.MainLog.Infof("AMF receives %+v registration EIR notification", NfServices[0].ApiPrefix)
			if s.ServerAmf.Context().EIRApiPrefix == "" {
				s.ServerAmf.Context().EIRApiPrefix = NfServices[0].ApiPrefix
			} else {
				logger.MainLog.Warnf("This EIR notification is ignored, because the AMF use the %+v EIR", NfServices[0].ApiPrefix)
			}
		} else {
			logger.MainLog.Warnf("AMF receives malformed registration EIR notification: [%+v]", requestNotificationData)
		}
	}

	c.JSON(http.StatusNoContent, nil)
}

// ProvideLocationInfo - Namf_Location ProvideLocationInfo service Operation
func (s *Server) HTTPProvideLocationInfo(c *gin.Context) {
	var requestLocInfo models.RequestLocInfo

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.LocationLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&requestLocInfo, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.LocationLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}
	s.Processor().HandleProvideLocationInfoRequest(c, requestLocInfo)
}

// ProvidePositioningInfo - Namf_Location ProvidePositioningInfo service Operation
func (s *Server) HTTPProvidePositioningInfo(c *gin.Context) {
	logger.LocationLog.Warnf("Handle Provide Positioning Info is not implemented.")
	c.JSON(http.StatusNotImplemented, gin.H{})
}

func (s *Server) HTTPCancelLocation(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}
